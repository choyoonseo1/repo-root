name: CI/CD Monorepo

on:
  push:
    branches: [ "main" ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'infra/**'
      - '.github/workflows/deploy.yml'

concurrency:
  group: ci-cd-monorepo
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: backend
            context: backend
            imagename: myapp-backend
          - name: frontend
            context: frontend
            imagename: myapp-frontend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push ${{ matrix.name }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.imagename }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.imagename }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Show infra files
        run: |
          pwd
          ls -la
          echo "---- infra ----"
          ls -la infra || true
          echo "---- tracked by git ----"
          git ls-files infra || true

      - name: Upload infra to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "infra/**"
          target: "~/app/infra"
          strip_components: 1

      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            mkdir -p ~/app && cd ~/app

            # .env.prod를 시크릿으로 생성
            cat > infra/.env.prod << 'EOF'
            BACKEND_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/myapp-backend:latest
            FRONTEND_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/myapp-frontend:latest

            SPRING_PROFILES_ACTIVE=prod
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS || 'http://localhost:3000' }}
            EOF

            # (비공개 레포 대비) Docker Hub 로그인
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin || true

            # 최신 이미지 pull
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/myapp-backend:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/myapp-frontend:latest

            # compose 프리체크 및 배포
            docker compose -f infra/docker-compose.prod.yml --env-file infra/.env.prod config > /dev/null
            docker compose -f infra/docker-compose.prod.yml --env-file infra/.env.prod up -d --pull always --remove-orphans

            # 상태 출력(제출용)
            docker compose -f infra/docker-compose.prod.yml --env-file infra/.env.prod ps